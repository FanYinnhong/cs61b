
 This program inserts lexicographically increasing Stringsinto Maps as <String, Integer> pairs.

Enter # strings to insert into ULLMap: 10
class ULLMap: 0.00 sec

Enter # strings to insert into MyHashMap: 100
class MyHashMap: 0.00 sec

Enter # strings to insert into Java's HashMap: 1000
Java's Built-in HashMap: 0.02 sec

Would you like to try more timed-tests? (y/n): 10000

Enter # strings to insert into ULLMap: 10000
class ULLMap: 1.22 sec

Enter # strings to insert into MyHashMap: 100000
class MyHashMap: 0.28 sec

Enter # strings to insert into Java's HashMap: 100000
Java's Built-in HashMap: 0.11 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into ULLMap: 100000
--Stack Overflow -- couldn't add 100000 strings.

Enter # strings to insert into MyHashMap: 100000
class MyHashMap: 0.17 sec

Enter # strings to insert into Java's HashMap: 100000
Java's Built-in HashMap: 0.12 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into ULLMap: 1000000
--Stack Overflow -- couldn't add 1000000 strings.

Enter # strings to insert into MyHashMap: 1000000
class MyHashMap: 2.01 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 0.84 sec

Would you like to try more timed-tests? (y/n): n

Process finished with exit code 0

 This program inserts random Strings of length L
 Into different types of maps as <String, Integer> pairs.

What would you like L to be?: 100

Enter # strings to insert into ULLMap: 10000
class ULLMap: 1.05 sec

Enter # strings to insert into your MyHashMap: 100000
class MyHashMap: 0.57 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 2.14 sec

Would you like to try more timed-tests? (y/n)

The memory of HashMap is larger than BSTmap but the running time is better than BSTmap.